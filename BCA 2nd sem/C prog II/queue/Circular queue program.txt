Q1. WAP in C to implement circular queue.

#include <stdio.h>
#include <conio.h> 
#define MAX 5
int a[MAX];
int rear = - 1;
int front = - 1;
void enqueue();
void dequeue();
void display();
int main()
{
    int choice;
    while (1)
    {
        printf("1.Insert element to queue \n");
        printf("2.Delete element from queue \n");
        printf("3.Display all elements of queue \n");
        printf("Enter your choice : ");
        scanf("%d", &choice);
        switch (choice)
        {
            case 1:
            enqueue();
            break;

            case 2:
            dequeue();
            break;

            case 3:
            display();
            break;
            
            default:
            printf("Wrong choice \n");
        } 
    } 
} 

void enqueue()
{
    int data;
    if ((front ==0 && rear == MAX - 1) || (rear +1 == front))
    {
    printf("Queue Overflow \n");
    }
    else
    {
        printf("Inset the element in queue : ");
        scanf("%d", &data);
        if(rear ==-1)
        {
            front = 0, rear=0;
        }
        else if ( rear == MAX - 1)
        {
            rear=0;
        }
        else 
        rear = rear + 1;
        a[rear] = data;
    }
} 
 
 void dequeue()
{
    if (front == - 1)
    {
        printf("Queue Underflow \n");
        return ;
    }
    else
    {   if(front ==rear)
        front = - 1 , rear = -1;
        else if ( front == MAX - 1)
        front = 0;
        else
        printf("Element deleted from queue is : %d\n", a[front]);
        front = front + 1;
    }
} 
 void display()
{
    int i,j;
    if (front == - 1 && rear == -1)
        printf("Queue is empty \n");
    
    if(front > rear)
    {
        for(i = front ; i < MAX; i++)
        {
        printf("%d", a[i]);
        printf("\t");
        }
        for(j=0;j<=rear;j++)
        {
        printf("%d", a[j]);
        printf("\t");
        }
    }
    else
    {
        printf("Elements in Queue are : \n");
        for (i = front; i <= rear; i++)
            printf("%d ", a[i]);
        printf("\n");
    }
}